import java.util.*;

class Student {
    int id;
    String name;

    Student(int id, String name) {
        this.id = id;
        this.name = name;
    }

    @Override
    public String toString() {//what is happening here?
        return id + " - " + name;
    }
}

class Subject {
    String subjectName;

    Subject(String subjectName) {
        this.subjectName = subjectName;
    }

    @Override
    public String toString() {
        return subjectName;
    }
}

class Assignment {
    String title;
    double weightage;

    Assignment(String title, double weightage) {
        this.title = title;
        this.weightage = weightage;
    }

    @Override
    public String toString() {
        return title + " (Weight: " + weightage + ")";
    }
}

class Grade {
    double score;

    Grade(double score) {
        this.score = score;
    }

    @Override
    public String toString() {
        return "Score: " + score;
    }
}

public class Gradebook {
    // Data storage
    Map<Integer, Student> students = new HashMap<>();
    Map<String, Subject> subjects = new HashMap<>();
    Map<String, List<Assignment>> subjectAssignments = new HashMap<>();
    Map<String, Map<Integer, Map<String, Grade>>> grades = new HashMap<>();

    // Add student
    public void addStudent(Scanner scanner) {
        System.out.print("Enter student ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();
        students.put(id, new Student(id, name));
        System.out.println("Student added successfully!");
    }

    // Delete student
    public void deleteStudent(Scanner scanner) {
        System.out.print("Enter student ID to delete: ");
        int id = scanner.nextInt();
        if (students.remove(id) != null) {
            System.out.println("Student deleted successfully!");
        } else {
            System.out.println("Student not found!");
        }
    }

    // Add subject
    public void addSubject(Scanner scanner) {
        System.out.print("Enter subject name: ");
        String name = scanner.nextLine();
        subjects.put(name, new Subject(name));
        subjectAssignments.put(name, new ArrayList<>());
        grades.put(name, new HashMap<>());
        System.out.println("Subject added successfully!");
    }

    // Add assignment
    public void addAssignment(Scanner scanner) {
        System.out.print("Enter subject name: ");
        String subjectName = scanner.nextLine();
        if (!subjects.containsKey(subjectName)) {
            System.out.println("Subject not found!");
            return;
        }
        System.out.print("Enter assignment title: ");
        String title = scanner.nextLine();
        System.out.print("Enter assignment weightage: ");
        double weightage = scanner.nextDouble();
        scanner.nextLine(); // Consume newline
        subjectAssignments.get(subjectName).add(new Assignment(title, weightage));
        System.out.println("Assignment added successfully!");
    }

    // Record grade
    public void recordGrade(Scanner scanner) {
        System.out.print("Enter subject name: ");
        String subjectName = scanner.nextLine();
        if (!subjects.containsKey(subjectName)) {
            System.out.println("Subject not found!");
            return;
        }
        System.out.print("Enter student ID: ");
        int studentId = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        if (!students.containsKey(studentId)) {
            System.out.println("Student not found!");
            return;
        }
        System.out.print("Enter assignment title: ");
        String assignmentTitle = scanner.nextLine();
        System.out.print("Enter grade (score): ");
        double score = scanner.nextDouble();
        grades.get(subjectName)
                .computeIfAbsent(studentId, k -> new HashMap<>())
                .put(assignmentTitle, new Grade(score));
        System.out.println("Grade recorded successfully!");
    }

    // Calculate final grade
    public double calculateFinalGrade(String subjectName, int studentId) {
        List<Assignment> assignments = subjectAssignments.get(subjectName);
        Map<String, Grade> studentGrades = grades.get(subjectName).get(studentId);

        if (assignments == null || studentGrades == null) {
            return 0.0;
        }

        double totalWeight = 0;
        double weightedScore = 0;

        for (Assignment assignment : assignments) {
            Grade grade = studentGrades.get(assignment.title);
            if (grade != null) {
                weightedScore += grade.score * assignment.weightage;
                totalWeight += assignment.weightage;
            }
        }

        return totalWeight > 0 ? (weightedScore / totalWeight) : 0.0;
    }

    // Print grade report
    public void printGradeReport(Scanner scanner) {
        System.out.print("Enter student ID: ");
        int studentId = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        Student student = students.get(studentId);
        if (student == null) {
            System.out.println("Student not found!");
            return;
        }

        System.out.println("Grade Report for " + student.name + ":");
        for (String subjectName : subjects.keySet()) {
            double finalGrade = calculateFinalGrade(subjectName, studentId);
            System.out.println("- " + subjectName + ": " + finalGrade);
        }
    }

    // Main menu
    public void menu() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\n--- Gradebook Menu ---");
            System.out.println("1. Add Student");
            System.out.println("2. Delete Student");
            System.out.println("3. Add Subject");
            System.out.println("4. Add Assignment");
            System.out.println("5. Record Grade");
            System.out.println("6. Print Grade Report");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addStudent(scanner);
                    break;
                case 2:
                    deleteStudent(scanner);
                    break;
                case 3:
                    addSubject(scanner);
                    break;
                case 4:
                    addAssignment(scanner);
                    break;
                case 5:
                    recordGrade(scanner);
                    break;
                case 6:
                    printGradeReport(scanner);
                    break;
                case 7:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    // Main method
    public static void main(String[] args) {
        Gradebook gradebook = new Gradebook();
        gradebook.menu();
    }
}
